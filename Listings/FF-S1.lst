C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:48:56 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FF_S1
OBJECT MODULE PLACED IN .\Objects\FF-S1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FF-S1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\FF-
                    -S1.lst) TABS(2) OBJECT(.\Objects\FF-S1.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // TP5.c
   3          //-----------------------------------------------------------------------------
   4          // AUTH: 
   5          // DATE: 
   6          //
   7          // Target: C8051F02x
   8          // Tool chain: KEIL Microvision 4
   9          //
  10          //-----------------------------------------------------------------------------
  11          #include <C8051F020.h>
  12          #include "c8051F020_SFR16.h"
  13          #include "FF-S1_Config.h"
  14          #include "FF-S1_Divers.h"
  15          #include <stdlib.h>
  16          
  17          unsigned char Intensite=80; //On met à 20% comme valeur d'exemple
  18          unsigned char Lum_ON=10;
  19          unsigned char Lum_OFF=20;
  20          unsigned char Lum_Nbre=10;
  21          int currentNum = 0;
  22          int one_cs = 20828; //Nombre de cycles processeur pour attendre 1cs.
  23          int cptON = 0;
  24          int cptOFF = 0;
  25          int divTimer = 0;
  26          int t_on = 0;
  27          int t_off = 0;
  28          int cpt = 0;
  29          
  30          sbit LED = P1^6;
  31          int i=1;
  32          int k=0;
  33          
  34          char xdata buffer[10];
  35          
  36          #define Reset_Timer3Overflow TMR3CN &= 0x04
  37          #define Disable_Timer3 TMR3CN = 0x00
  38          // Prototypes de Fonctions
  39          
  40          unsigned char Transmission(){
  41   1        buffer[0]='\0';
  42   1        while (SBUF0 != '\r'){
  43   2          while (RI0 == 0){}
  44   2          RI0 = 0;
  45   2          REN0 = 0;     //desactive reception
  46   2          buffer[k] = SBUF0;
  47   2          REN0 = 1; //active reception pour next msg
  48   2          k++;
  49   2        }
  50   1          buffer[k] = '\0';
  51   1          k=0;
  52   1          return atoi(buffer);
  53   1      }
  54          
C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:48:56 PAGE 2   

  55          void Reception(void){
  56   1        
  57   1          while (RI0 == 0){}
  58   1          Intensite = Transmission();
  59   1          while (RI0 == 0){}
  60   1          Lum_ON = Transmission();
  61   1          while (RI0 == 0){}
  62   1          Lum_OFF = Transmission();
  63   1          while (RI0 == 0){}
  64   1          Lum_Nbre = Transmission();
  65   1          EIE2 |= 0x01;
  66   1      }
  67          
  68          void Lumiere(unsigned char Intensite,unsigned char Lum_ON,unsigned char Lum_OFF,unsigned char Lum_Nbre){
  69   1        //Gestion de l'intensité
  70   1        if (Intensite != 100){
  71   2          t_on = one_cs*(Intensite/100.0);
  72   2        }
  73   1        else
  74   1          t_on = one_cs;
  75   1        t_off = one_cs - t_on;
  76   1          if (currentNum != Lum_Nbre && Lum_ON != 0 && cptON != 20*Lum_ON){
  77   2            //On garde allumé (à l'intensité qu'on veut) pendant Lum_ON décisecondes
  78   2            cptON++;
  79   2            if(LED) {
  80   3              TMR3RL = 0xFFFF - t_on; //Variable avec Intensite
  81   3          }
  82   2            else if (t_off != 0) {
  83   3              TMR3RL = 0xFFFF - t_off;
  84   3          }
  85   2          //Générateur de signaux
  86   2          LED = !LED;
  87   2          Reset_Timer3Overflow;
  88   2          cptOFF = 0; //Reset du compteur de Lum_OFF pour son prochain allumage
  89   2          return ;
  90   2        }
  91   1          else if (currentNum != Lum_Nbre && Lum_OFF != 0 && cptOFF != 20*Lum_OFF){
  92   2            //On garde éteint pendant Lum_OFF millisecondes => On met LED à 0 et on ne rentre plus dans l'ISR penda
             -nt Lum_OFF secondes
  93   2            cptOFF++;
  94   2            LED = 0;
  95   2            TMR3RL = 0xFFFF - 10414; //On le met à la même période que le ON ((TMRRL dutyON + TMRRL dutyOFF )/ 2)
  96   2            Reset_Timer3Overflow;
  97   2            if ( cptOFF == 20*Lum_OFF) {
  98   3              currentNum++;
  99   3              cptON = 0; //Reset du compteur de Lum_ON pour son prochain allumage
 100   3            }
 101   2            return ; //On sort immédiatement de la fonction
 102   2          }
 103   1          //Gestion du rapport cyclique : Mode basique sans clignotement
 104   1        if(LED) {
 105   2          TMR3RL = 0xFFFF - t_on; // A terme, on veut pouvoir influencer ces valeurs de reload avec Intensite
 106   2        }
 107   1        else {
 108   2          TMR3RL = 0xFFFF - t_off; // On ne garde PAS à 65535, ça cause des erreurs
 109   2        }
 110   1        //Générateur de signaux
 111   1        LED = !LED;
 112   1        Reset_Timer3Overflow;
 113   1      }
 114          
 115          void Lumiere_Stop(void){
C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:48:56 PAGE 3   

 116   1        if (SBUF0 == 's') {
 117   2        Disable_Timer3;   //Désactive le signal d'allumage du pointeur
 118   2        LED = 0;
 119   2        }
 120   1      }
 121          //-----------------------------------------------------------------------------
 122          //-----------------------------------------------------------------------------
 123          // MAIN Routine
 124          //-----------------------------------------------------------------------------
 125          void main (void) {
 126   1             
 127   1          Init_Device();  // Appel des configurations globales
 128   1          
 129   1      // Début Insertion Code Configuration des périphériques ***********************
 130   1          EA = 1;
 131   1        
 132   1      // Fin Code Initialisations ***************************************************
 133   1          Reception();
 134   1        
 135   1      // Début Insertion Code Phase Démarrage *************************************** 
 136   1            
 137   1            
 138   1      // Fin Code phase Démarrage ***************************************************
 139   1        
 140   1        
 141   1        while(1)
 142   1              {
 143   2            Lumiere_Stop(); //On vérifie en permanence si on reçoit le caractère d'extinction
 144   2              }                       
 145   1      }
 146          
 147          //-----------------------------------------------------------------------------
 148          //-----------------------------------------------------------------------------
 149          // Fonctions de configuration des divers périphériques
 150          //-----------------------------------------------------------------------------
 151          // Insérez vos fonctions de configuration ici
 152          
 153          //-----------------------------------------------------------------------------
 154          //-----------------------------------------------------------------------------
 155          // Fonctions d'interruptions
 156          //-----------------------------------------------------------------------------
 157          // Insérez vos fonctions d'interruption ici
 158          
 159          void ISR_timer3Overflow() interrupt 14
 160          {
 161   1          Lumiere(Intensite,Lum_ON, Lum_OFF, Lum_Nbre);
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
