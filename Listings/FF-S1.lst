C51 COMPILER V9.59.0.0   FF_S1                                                             03/17/2021 22:05:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FF_S1
OBJECT MODULE PLACED IN .\Objects\FF-S1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FF-S1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\FF-
                    -S1.lst) TABS(2) OBJECT(.\Objects\FF-S1.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // TP5.c
   3          //-----------------------------------------------------------------------------
   4          // AUTH: 
   5          // DATE: 
   6          //
   7          // Target: C8051F02x
   8          // Tool chain: KEIL Microvision 4
   9          //
  10          //-----------------------------------------------------------------------------
  11          #include <C8051F020.h>
  12          #include "c8051F020_SFR16.h"
  13          #include "FF-S1_Config.h"
  14          #include "FF-S1_Divers.h"
  15          
  16          unsigned char Intensite=80; //On met à 20% comme valeur d'exemple
  17          unsigned char Lum_ON=10;
  18          unsigned char Lum_OFF=20;
  19          unsigned char Lum_Nbre=10;
  20          int currentNum = 0;
  21          int one_cs = 20828; //Nombre de cycles processeur pour attendre 1cs.
  22          int cptON = 0;
  23          int cptOFF = 0;
  24          int divTimer = 0;
  25          int t_on = 0;
  26          int t_off = 0;
  27          int cpt = 0;
  28          
  29          sbit LED = P1^6;
  30          int i=1;
  31          
  32          #define Reset_Timer3Overflow TMR3CN &= 0x04
  33          #define Disable_Timer3 TMR3CN = 0x00
  34          // Prototypes de Fonctions
  35          void Reception(void){
  36   1        
  37   1          while (RI0 == 0)
  38   1          RI0 = 0;
  39   1          REN0 = 0;     //desactive reception
  40   1          Intensite = SBUF0;
  41   1          REN0 = 1; //active reception pour next msg
  42   1      
  43   1          while (RI0 == 0)
  44   1            
  45   1          Lum_ON = SBUF0;
  46   1          REN0 = 1; //active reception pour next msg
  47   1          RI0 = 0;
  48   1      
  49   1          while (RI0 == 0)
  50   1            
  51   1          Lum_OFF = SBUF0;
  52   1          REN0 = 1; //active reception pour next msg
  53   1          RI0 = 0;
  54   1          
C51 COMPILER V9.59.0.0   FF_S1                                                             03/17/2021 22:05:31 PAGE 2   

  55   1          while (RI0 == 0)
  56   1            
  57   1          Lum_Nbre = SBUF0;
  58   1          REN0 = 1; //active reception pour next msg
  59   1          RI0 = 0;
  60   1          
  61   1          EIE2 |= 0x01;
  62   1      }
  63          void Lumiere(unsigned char Intensite,unsigned char Lum_ON,unsigned char Lum_OFF,unsigned char Lum_Nbre){
  64   1        //Gestion de l'intensité
  65   1        t_on = one_cs*(Intensite/100.0);
  66   1        t_off = one_cs - t_on;
  67   1          if (currentNum != Lum_Nbre && Lum_ON != 0 && cptON != 20*Lum_ON){
  68   2            //On garde allumé (à l'intensité qu'on veut) pendant Lum_ON décisecondes
  69   2            cptON++;
  70   2            if(LED) {
  71   3              TMR3RL = 0xFFFF - t_on; //Variable avec Intensite
  72   3          }
  73   2            else if (t_off != 0) {
  74   3              TMR3RL = 0xFFFF - t_off;
  75   3          }
  76   2          //Générateur de signaux
  77   2          LED = !LED;
  78   2          Reset_Timer3Overflow;
  79   2          cptOFF = 0; //Reset du compteur de Lum_OFF pour son prochain allumage
  80   2          return ;
  81   2        }
  82   1          else if (currentNum != Lum_Nbre && Lum_OFF != 0 && cptOFF != 20*Lum_OFF){
  83   2            //On garde éteint pendant Lum_OFF millisecondes => On met LED à 0 et on ne rentre plus dans l'ISR penda
             -nt Lum_OFF secondes
  84   2            cptOFF++;
  85   2            LED = 0;
  86   2            TMR3RL = 0xFFFF - 10414; //On le met à la même période que le ON ((TMRRL dutyON + TMRRL dutyOFF )/ 2)
  87   2            Reset_Timer3Overflow;
  88   2            if ( cptOFF == 20*Lum_OFF) {
  89   3              currentNum++;
  90   3              cptON = 0; //Reset du compteur de Lum_ON pour son prochain allumage
  91   3            }
  92   2            return ; //On sort immédiatement de la fonction
  93   2          }
  94   1          //Gestion du rapport cyclique : Mode basique sans clignotement
  95   1        if(LED) {
  96   2          TMR3RL = 0xFFFF - t_on; // A terme, on veut pouvoir influencer ces valeurs de reload avec Intensite
  97   2        }
  98   1        else {
  99   2          TMR3RL = 0xFFFF - t_off; // On ne garde PAS à 65535, ça cause des erreurs
 100   2        }
 101   1        //Générateur de signaux
 102   1        LED = !LED;
 103   1        Reset_Timer3Overflow;
 104   1      }
 105          
 106          void Lumiere_Stop(void){
 107   1        //If (Réception du caractère d'extinction par l'UART) {
 108   1        //Disable_Timer3;   //Désactive le signal d'allumage du pointeur
 109   1        //}
 110   1      }
 111          //-----------------------------------------------------------------------------
 112          //-----------------------------------------------------------------------------
 113          // MAIN Routine
 114          //-----------------------------------------------------------------------------
 115          void main (void) {
C51 COMPILER V9.59.0.0   FF_S1                                                             03/17/2021 22:05:31 PAGE 3   

 116   1             
 117   1          Init_Device();  // Appel des configurations globales
 118   1          
 119   1      // Début Insertion Code Configuration des périphériques ***********************
 120   1          EA = 1;
 121   1        
 122   1      // Fin Code Initialisations ***************************************************
 123   1          Reception();
 124   1        
 125   1      // Début Insertion Code Phase Démarrage *************************************** 
 126   1            
 127   1            
 128   1      // Fin Code phase Démarrage ***************************************************
 129   1        
 130   1        
 131   1        while(1)
 132   1              {
 133   2            Lumiere_Stop(); //On vérifie en permanence si on reçoit le caractère d'extinction
 134   2              }                       
 135   1      }
 136          
 137          //-----------------------------------------------------------------------------
 138          //-----------------------------------------------------------------------------
 139          // Fonctions de configuration des divers périphériques
 140          //-----------------------------------------------------------------------------
 141          // Insérez vos fonctions de configuration ici
 142          
 143          //-----------------------------------------------------------------------------
 144          //-----------------------------------------------------------------------------
 145          // Fonctions d'interruptions
 146          //-----------------------------------------------------------------------------
 147          // Insérez vos fonctions d'interruption ici
 148          
 149          void ISR_timer3Overflow() interrupt 14
 150          {
 151   1          Lumiere(Intensite,Lum_ON, Lum_OFF, Lum_Nbre);
 152   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    393    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
