C51 COMPILER V9.59.0.0   FF_S1                                                             03/16/2021 14:36:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FF_S1
OBJECT MODULE PLACED IN .\Objects\FF-S1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FF-S1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\FF-
                    -S1.lst) TABS(2) OBJECT(.\Objects\FF-S1.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // TP5.c
   3          //-----------------------------------------------------------------------------
   4          // AUTH: 
   5          // DATE: 
   6          //
   7          // Target: C8051F02x
   8          // Tool chain: KEIL Microvision 4
   9          //
  10          //-----------------------------------------------------------------------------
  11          #include <C8051F020.h>
  12          #include "c8051F020_SFR16.h"
  13          #include "FF-S1_Config.h"
  14          #include "FF-S1_Divers.h"
  15          
  16          unsigned char Intensite=100; //On met à 20% comme valeur d'exemple
  17          unsigned char Lum_ON=5;
  18          unsigned char Lum_OFF=10;
  19          unsigned char Lum_Nbre=10;
  20          int currentNum = 0;
  21          int one_cs = 20828; //Nombre de cycles processeur pour attendre 1cs.
  22          int cptON = 0;
  23          int cptOFF = 0;
  24          int divTimer = 0;
  25          int t_on = 0;
  26          int t_off = 0;
  27          
  28          sbit LED = P1^6;
  29          int i=1;
  30          
  31          #define Reset_Timer3Overflow TMR3CN &= 0x04
  32          #define Disable_Timer3 TMR3CN = 0x00
  33          // Prototypes de Fonctions
  34          
  35          
  36          void Lumiere(unsigned char Intensite,unsigned char Lum_ON,unsigned char Lum_OFF,unsigned char Lum_Nbre){
  37   1        //Gestion de l'intensité
  38   1        t_on = one_cs*(Intensite/100.0);
  39   1        t_off = one_cs - t_on;
  40   1          if (currentNum != Lum_Nbre && Lum_ON != 0 && cptON != 20*Lum_ON){
  41   2            //On garde allumé (à l'intensité qu'on veut) pendant Lum_ON décisecondes
  42   2            cptON++;
  43   2            if(LED) {
  44   3              TMR3RL = 0xFFFF - t_on; //Variable avec Intensite
  45   3          }
  46   2            else if (t_off != 0) {
  47   3              TMR3RL = 0xFFFF - t_off;
  48   3          }
  49   2          //Générateur de signaux
  50   2          LED = !LED;
  51   2          Reset_Timer3Overflow;
  52   2          cptOFF = 0; //Reset du compteur de Lum_OFF pour son prochain allumage
  53   2          return ;
  54   2        }
C51 COMPILER V9.59.0.0   FF_S1                                                             03/16/2021 14:36:32 PAGE 2   

  55   1          else if (currentNum != Lum_Nbre && Lum_OFF != 0 && cptOFF != 20*Lum_OFF){
  56   2            //On garde éteint pendant Lum_OFF millisecondes => On met LED à 0 et on ne rentre plus dans l'ISR penda
             -nt Lum_OFF secondes
  57   2            cptOFF++;
  58   2            LED = 0;
  59   2            TMR3RL = 0xFFFF - 10414; //On le met à la même période que le ON ((TMRRL dutyON + TMRRL dutyOFF )/ 2)
  60   2            Reset_Timer3Overflow;
  61   2            if ( cptOFF == 20*Lum_OFF) {
  62   3              currentNum++;
  63   3              cptON = 0; //Reset du compteur de Lum_ON pour son prochain allumage
  64   3            }
  65   2            return ; //On sort immédiatement de la fonction
  66   2          }
  67   1          //Gestion du rapport cyclique : Mode basique sans clignotement
  68   1        if(LED) {
  69   2          TMR3RL = 0xFFFF - t_on; // A terme, on veut pouvoir influencer ces valeurs de reload avec Intensite
  70   2        }
  71   1        else {
  72   2          TMR3RL = 0xFFFF - t_off; // On ne garde PAS à 65535, ça cause des erreurs
  73   2        }
  74   1        //Générateur de signaux
  75   1        LED = !LED;
  76   1        Reset_Timer3Overflow;
  77   1      }
  78          
  79          void Lumiere_Stop(void){
  80   1        //If (Réception du caractère d'extinction par l'UART) {
  81   1        //Disable_Timer3;   //Désactive le signal d'allumage du pointeur
  82   1        //}
  83   1      }
  84          //-----------------------------------------------------------------------------
  85          //-----------------------------------------------------------------------------
  86          // MAIN Routine
  87          //-----------------------------------------------------------------------------
  88          void main (void) {
  89   1             
  90   1          Init_Device();  // Appel des configurations globales
  91   1          
  92   1      // Début Insertion Code Configuration des périphériques ***********************
  93   1       
  94   1        
  95   1      // Fin Code Initialisations ***************************************************
  96   1      
  97   1        
  98   1      // Début Insertion Code Phase Démarrage *************************************** 
  99   1            EA = 1;
 100   1        // Fin Code phase Démarrage ***************************************************
 101   1        
 102   1        
 103   1        while(1)
 104   1              {
 105   2            Lumiere_Stop(); //On vérifie en permanence si on reçoit le caractère d'extinction
 106   2              }                       
 107   1      }
 108          
 109          //-----------------------------------------------------------------------------
 110          //-----------------------------------------------------------------------------
 111          // Fonctions de configuration des divers périphériques
 112          //-----------------------------------------------------------------------------
 113          // Insérez vos fonctions de configuration ici
 114          
 115          //-----------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   FF_S1                                                             03/16/2021 14:36:32 PAGE 3   

 116          //-----------------------------------------------------------------------------
 117          // Fonctions d'interruptions
 118          //-----------------------------------------------------------------------------
 119          // Insérez vos fonctions d'interruption ici
 120          
 121          void ISR_timer3Overflow() interrupt 14
 122          {
 123   1          Lumiere(Intensite,Lum_ON, Lum_OFF, Lum_Nbre);
 124   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    336    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
