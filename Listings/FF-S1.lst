C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:43:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FF_S1
OBJECT MODULE PLACED IN .\Objects\FF-S1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FF-S1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\FF-
                    -S1.lst) TABS(2) OBJECT(.\Objects\FF-S1.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // TP5.c
   3          //-----------------------------------------------------------------------------
   4          // AUTH: 
   5          // DATE: 
   6          //
   7          // Target: C8051F02x
   8          // Tool chain: KEIL Microvision 4
   9          //
  10          //-----------------------------------------------------------------------------
  11          #include <C8051F020.h>
  12          #include "c8051F020_SFR16.h"
  13          #include "FF-S1_Config.h"
  14          #include "FF-S1_Divers.h"
  15          #include <stdlib.h>
  16          
  17          unsigned char Intensite=80; //On met à 20% comme valeur d'exemple
  18          unsigned char Lum_ON=10;
  19          unsigned char Lum_OFF=20;
  20          unsigned char Lum_Nbre=10;
  21          int currentNum = 0;
  22          int one_cs = 20828; //Nombre de cycles processeur pour attendre 1cs.
  23          int cptON = 0;
  24          int cptOFF = 0;
  25          int divTimer = 0;
  26          int t_on = 0;
  27          int t_off = 0;
  28          int cpt = 0;
  29          
  30          sbit LED = P1^6;
  31          int i=1;
  32          int k=0;
  33          
  34          char xdata buffer[5];
  35          
  36          #define Reset_Timer3Overflow TMR3CN &= 0x04
  37          #define Disable_Timer3 TMR3CN = 0x00
  38          // Prototypes de Fonctions
  39          void Reception(void){
  40   1        
  41   1          while (RI0 == 0)
  42   1            
  43   1          while (buffer[k] != '\r'){
  44   2            RI0 = 0;
  45   2            REN0 = 0;     //desactive reception
  46   2            buffer[k] = SBUF0;
  47   2            REN0 = 1; //active reception pour next msg
  48   2            k++;
  49   2          }
  50   1          buffer[k] = '\0';
  51   1          Intensite = atoi(buffer);
  52   1          k=0;
  53   1      
  54   1      <<<<<<< Updated upstream
C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:43:09 PAGE 2   

*** ERROR C141 IN LINE 54 OF FF-S1.c: syntax error near '<<', expected '__asm'
*** ERROR C202 IN LINE 54 OF FF-S1.c: 'Updated': undefined identifier
  55   1          while (RI0 == 0)
  56   1            
  57   1          while (buffer[k] != '\r'){
  58   2            RI0 = 0;
  59   2            REN0 = 0;     //desactive reception
  60   2            buffer[k] = SBUF0;
  61   2            REN0 = 1; //active reception pour next msg
  62   2            k++;
  63   2          }
  64   1      =======
*** ERROR C141 IN LINE 64 OF FF-S1.c: syntax error near '==', expected '__asm'
  65   1      unsigned char Transmission(){
  66   2        buffer[0]='\0';
  67   2        while (SBUF0 != '\r'){
  68   3          while (RI0 == 0){}
  69   3          RI0 = 0;
  70   3          REN0 = 0;     //desactive reception
  71   3          buffer[k] = SBUF0;
  72   3          REN0 = 1; //active reception pour next msg
  73   3          k++;
  74   3        }
  75   2      >>>>>>> Stashed changes
  76   2          buffer[k] = '\0';
  77   2          Lum_ON = atoi(buffer);
  78   2          k=0;
  79   2      
  80   2      <<<<<<< Updated upstream
  81   2          while (RI0 == 0)
  82   2            
  83   2          while (buffer[k] != '\r'){
  84   3            RI0 = 0;
  85   3            REN0 = 0;     //desactive reception
  86   3            buffer[k] = SBUF0;
  87   3            REN0 = 1; //active reception pour next msg
  88   3            k++;
  89   3          }
  90   2          buffer[k] = '\0';
  91   2          Lum_OFF = atoi(buffer);
  92   2          k=0;
  93   2          
  94   2          while (RI0 == 0)
  95   2            
  96   2          while (buffer[k] != '\r'){
  97   3            RI0 = 0;
  98   3            REN0 = 0;     //desactive reception
  99   3            buffer[k] = SBUF0;
 100   3            REN0 = 1; //active reception pour next msg
 101   3            k++;
 102   3          }
 103   2          buffer[k] = '\0';
 104   2          Intensite = atoi(buffer);
 105   2          k=0;    
 106   2          
 107   2          while (RI0 == 0)
 108   2          while (buffer[k] != '\r'){
 109   3            RI0 = 0;
 110   3            REN0 = 0;     //desactive reception
 111   3            buffer[k] = SBUF0;
 112   3            REN0 = 1; //active reception pour next msg
 113   3            k++;
C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:43:09 PAGE 3   

 114   3          }
 115   2          buffer[k] = '\0';
 116   2          Lum_Nbre = atoi(buffer);
 117   2          k=0;
 118   2          
 119   2      =======
 120   2      void Reception(void){
 121   2        
 122   2          while (RI0 == 0){}
 123   2          Intensite = Transmission();
 124   2          while (RI0 == 0){}
 125   2          Lum_ON = Transmission();
 126   2          while (RI0 == 0){}
 127   2          Lum_OFF = Transmission();
 128   2          while (RI0 == 0){}
 129   2          Lum_Nbre = Transmission();
 130   2      >>>>>>> Stashed changes
 131   2          EIE2 |= 0x01;
 132   2      }
 133   1      void Lumiere(unsigned char Intensite,unsigned char Lum_ON,unsigned char Lum_OFF,unsigned char Lum_Nbre){
 134   2        //Gestion de l'intensité
 135   2        t_on = one_cs*(Intensite/100.0);
 136   2        t_off = one_cs - t_on;
 137   2          if (currentNum != Lum_Nbre && Lum_ON != 0 && cptON != 20*Lum_ON){
 138   3            //On garde allumé (à l'intensité qu'on veut) pendant Lum_ON décisecondes
 139   3            cptON++;
 140   3            if(LED) {
 141   4              TMR3RL = 0xFFFF - t_on; //Variable avec Intensite
 142   4          }
 143   3            else if (t_off != 0) {
 144   4              TMR3RL = 0xFFFF - t_off;
 145   4          }
 146   3          //Générateur de signaux
 147   3          LED = !LED;
 148   3          Reset_Timer3Overflow;
 149   3          cptOFF = 0; //Reset du compteur de Lum_OFF pour son prochain allumage
 150   3          return ;
 151   3        }
 152   2          else if (currentNum != Lum_Nbre && Lum_OFF != 0 && cptOFF != 20*Lum_OFF){
 153   3            //On garde éteint pendant Lum_OFF millisecondes => On met LED à 0 et on ne rentre plus dans l'ISR penda
             -nt Lum_OFF secondes
 154   3            cptOFF++;
 155   3            LED = 0;
 156   3            TMR3RL = 0xFFFF - 10414; //On le met à la même période que le ON ((TMRRL dutyON + TMRRL dutyOFF )/ 2)
 157   3            Reset_Timer3Overflow;
 158   3            if ( cptOFF == 20*Lum_OFF) {
 159   4              currentNum++;
 160   4              cptON = 0; //Reset du compteur de Lum_ON pour son prochain allumage
 161   4            }
 162   3            return ; //On sort immédiatement de la fonction
 163   3          }
 164   2          //Gestion du rapport cyclique : Mode basique sans clignotement
 165   2        if(LED) {
 166   3          TMR3RL = 0xFFFF - t_on; // A terme, on veut pouvoir influencer ces valeurs de reload avec Intensite
 167   3        }
 168   2        else {
 169   3          TMR3RL = 0xFFFF - t_off; // On ne garde PAS à 65535, ça cause des erreurs
 170   3        }
 171   2        //Générateur de signaux
 172   2        LED = !LED;
 173   2        Reset_Timer3Overflow;
 174   2      }
C51 COMPILER V9.59.0.0   FF_S1                                                             03/18/2021 11:43:09 PAGE 4   

 175   1      
 176   1      void Lumiere_Stop(void){
 177   1        if (SBUF0 == "s") {
 178   1        Disable_Timer3;   //Désactive le signal d'allumage du pointeur
 179   1        LED = 0;
 180   1        }
 181          }
 182          //-----------------------------------------------------------------------------
 183          //-----------------------------------------------------------------------------
 184          // MAIN Routine
 185          //-----------------------------------------------------------------------------
 186          void main (void) {
 187   1             
 188   1          Init_Device();  // Appel des configurations globales
 189   1          
 190   1      // Début Insertion Code Configuration des périphériques ***********************
 191   1          EA = 1;
 192   1        
 193   1      // Fin Code Initialisations ***************************************************
 194   1          Reception();
 195   1        
 196   1      // Début Insertion Code Phase Démarrage *************************************** 
 197   1            
 198   1            
 199   1      // Fin Code phase Démarrage ***************************************************
 200   1        
 201   1        
 202   1        while(1)
 203   1              {
 204   2            Lumiere_Stop(); //On vérifie en permanence si on reçoit le caractère d'extinction
 205   2              }                       
 206   1      }
 207          
 208          //-----------------------------------------------------------------------------
 209          //-----------------------------------------------------------------------------
 210          // Fonctions de configuration des divers périphériques
 211          //-----------------------------------------------------------------------------
 212          // Insérez vos fonctions de configuration ici
 213          
 214          //-----------------------------------------------------------------------------
 215          //-----------------------------------------------------------------------------
 216          // Fonctions d'interruptions
 217          //-----------------------------------------------------------------------------
 218          // Insérez vos fonctions d'interruption ici
 219          
 220          void ISR_timer3Overflow() interrupt 14
 221          {
 222   1          Lumiere(Intensite,Lum_ON, Lum_OFF, Lum_Nbre);
 223   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  3 ERROR(S)
